---
title: "Introduction to Computer Security"
description: "When learning computer security, how do we think and talk like a
hacker?"
date: "2024-08-02"
date-format: long
author: Gregory M. Kapfhammer
format:
  revealjs:
    theme: default
    css: ../css/styles.css
    history: false
    scrollable: true
    transition: slide
    highlight-style: github
    footer: "Security Synapse"
---

# What is infosec?

::: {.incremental style="margin-top: -0.5em;"}

- Prevent *unauthorized access* to data on a computer system
- Data is both *sensitive* and *valuable* and must be *protected*
- *Risk management* is the focus of information security
- *Malware* often helps an attacker gain access to a system
- *System failure* often occurs during an attack with malware

:::

::: {.fragment .fade .boxed-content style="margin-top: -0.25em; font-size: 0.9em;"}

**Key Questions**: Have you ever been the subject of an information security
attack? What was the attack vector? Could it have been prevented? What
strategies would have enabled your defense?

:::

## Learning the Lingo: PDR

::: incremental

- Key security acronyms describing design principles:
  - **PDR**: **P**revention, **D**etection, **R**eaction
    - *Prevention*: Stopping an attack before it starts
    - *Detection*: Identifying an attack in progress
    - *Reaction*: Stopping an attack before it causes damage

:::

::: {.fragment .fade .boxed-content style="margin-top: 0.25em; font-size: 0.9em;"}

**Key Questions**: From your perspective, which of these three is the most
important? Should an individual or an organization disclose information about a
security breach? Why or why not?

:::

## Learning the Lingo: CIA

::: incremental

- Key security acronyms describing design principles:
  - **CIA**: **C**onfidentiality, **I**ntegrity, **A**vailability
    - *Confidentiality*: Keeping secret information secret
    - *Integrity*: Data has not been corrupted or tampered with
    - *Availability*: Systems are up and running for valid users

:::

::: {.fragment .fade .boxed-content style="margin-top: 0.25em; font-size: 0.9em;"}

**Key Questions**: What is an attack a "hacker" could take to comprise one of
the **CIA** principles? How would the attack compromise the **CIA** principles?
What could be done to prevent the attack?

:::

## Learning the Lingo: DRY

::: incremental

- Key strategy for ensuring system security:
  - **DRY**: *D*on't *R*epeat *Y*ourself
    - Guideline for automation and system design
    - Avoid manual repetition by using scripts and tools
    - Reuse verified resources across multiple systems

:::

::: {.fragment .fade .boxed-content style="margin-top: 0.25em; font-size: 0.9em;"}

**Key Questions**: What are some practical ways to introduce **DRY** into your
systems and development practices? What is the downside of the **DRY** strategy?
How does this connect to *zero-touch deployment*?

:::

## Learning the Lingo: AAA

::: incremental

- Strategies for ensuring system security:
  - **AAA**: **A**uthentication, **A**uthorization, **A**ccounting
    - *Authentication*: Confirming someone's identity
    - *Authorization*: Keeping track of entity's resource access
    - *Accounting*: Tracking the usage of resources

:::

::: {.fragment .fade .boxed-content style="margin-top: 0.25em; font-size: 0.9em;"}

**Key Questions**: Why are these appropriate strategies for ensuring system
security? What are the limitations of each strategy? What is the fundamental
trade-off in computer security? Why?

:::

# *Key Dilemma*: people may have key computer security requirements but limited computer security expertise

# *Key Trade-off*: making a system secure often makes it less usable!

::: {.fragment .fade .boxed-content style="margin-top: 0.25em; font-size: 0.9em;"}

**Key Questions**: When you are using computer hardware and software do you tend
to err towards security or usability? What are some strategies for making
software both secure and usable?

:::

## Examples of four programs that may have security flaws! Any ideas?

- Web browsers like `firefox` or `chrome`
- Servers like `sshd` or `httpd`
- LLM interaction with `litellm`
- Terminal window history with `atuin` or `zsh`

::: {.fragment .fade .boxed-content style="margin-top: 0.25em; font-size: 0.9em;"}

**Key Questions**: What could be a *security vulnerability* in each of
these programs? How could they be *prevented* and *detected*? What should be the
*reaction* to the detection of a security vulnerability?

:::

## Overall goals of "security synapse"

::: {.fragment .fade-right}

- **High-Level Concepts**
  - Concepts such as *confidentiality* and *integrity*
  - Test all aspects of the system to ensure correctness
  - Make a benchmark framework to measure performance
- **Low-Level Implementation Details**
  - Use cryptography to secure transferred data
  - Use hashing to verify data integrity
  - Secure implementation in programming languages

:::

# *Implementation*: which languages are reputed to be the most or least secure? Why? Do you agree with consensus?
