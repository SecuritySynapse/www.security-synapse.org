---
title: "Introduction to Computer Security"
description: "When learning computer security, how do we think and talk like a
hacker?"
date: "2024-08-02"
date-format: long
author: Gregory M. Kapfhammer
format:
  revealjs:
    theme: default
    css: ../css/styles.css
    history: false
    scrollable: true
    transition: slide
    highlight-style: github
    footer: "Security Synapse"
---

# What is infosec?

::: {.incremental style="margin-top: -0.5em;"}

- Prevent *unauthorized access* to data on a computer system
- Data is both *sensitive* and *valuable* and must be *protected*
- *Risk management* is the focus of information security
- *Malware* often helps an attacker gain access to a system
- *System failure* often occurs during an attack with malware

:::

::: {.fragment .fade .boxed-content style="margin-top: -0.25em; font-size: 0.9em;"}

**Key Questions**: Have you ever been the subject of an information security
attack? What was the attack vector? Could it have been prevented? What
strategies would have enabled your defense?

:::

## Learning the Lingo: CIA

::: incremental

- Key security acronyms describing design principles:
  - **CIA**: **C**onfidentiality, **I**ntegrity, **A**vailability
    - *Confidentiality*: Keeping secret information secret
    - *Integrity*: Data has not been corrupted or tampered with
    - *Availability*: Systems are up and running for valid users

:::

::: {.fragment .fade .boxed-content style="margin-top: 0.25em; font-size: 0.9em;"}

**Key Questions**: What is an attack a "hacker" could take to comprise one of
the **CIA** principles? How would the attack compromise the **CIA** principles?
What could be done to prevent the attack?

:::

## Learning the Lingo: AAA

::: incremental

- Understand key security acronyms
  - **AAA**: Authentication, Authorization, Accounting
    - Authentication: Confirming someone's identity
    - Authorization: Keeping track of which resources an entity has access to
    - Accounting: Tracking the usage of resources
  - DRY: Don't Repeat Yourself
    - Guideline for automation and system design
    - Avoid manual repetition by using scripts and tools
    - Reuse resources, such as databases, across multiple systems

:::

## Examples of four programs to study through performance benchmarks

- Terminal window shell like `bash` or `zsh`
- Terminal prompt like `powerlevel10k` or `starship`
- Web browser like `firefox` or `chrome`
- Text editor like `vim` or `emacs`

::: {.fragment .fade .boxed-content style="margin-top: 0.25em; font-size: 0.9em;"}

*...* How do we *characterize* the execution environment of these programs? *...* How
do we *compare* their performance in different configurations? *...* How do we
*improve* their performance? *...*

:::

## Overall goals of "algorithmology"

::: {.fragment .fade-right}

- **Algorithm Engineering**:
  - Design and implement algorithm and data structure
  - Test all aspects of the system to ensure correctness
  - Make a benchmark framework to measure performance
- **Algorithm Evaluation**:
  - Design experiments to answer research questions
  - Conduct experiments and collect data
  - Analyze and visualize data to draw conclusions

:::
