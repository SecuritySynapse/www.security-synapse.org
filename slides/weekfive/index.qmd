---
title: "Exploring Malware"
subtitle: "Understanding the Basics of Computer Malware"
description: "How can I detect and defend against malware?"
date: "2024-09-23"
date-format: long
author: Gregory M. Kapfhammer
execute:
  echo: true
jupyter: python3
format:
  revealjs:
    completion: true
    theme: default
    css: ../css/styles.css
    history: false
    scrollable: true
    transition: slide
    highlight-style: github
    footer: "Security Synapse"
---

# What is malware?

::: {.incremental style="margin-top: -0.5em; font-size: 0.95em;"}

- A portmanteau of "malicious software"
- Programs that are intentionally malicious
- Distinct from software that is defective
- Real-world examples of malware:
    - Viruses
    - Worms
    - Trojans
    - Ransomware
    - Spyware

:::

# *Probing Questions*: have you every encountered malware? What happened? How did you resolve it? Lessons?

# Malware Targets

::: {.incremental style="margin-top: -0.5em;"}

- Malware targets:
  - Windows operating systems
  - Web browsers
  - Android devices
- Malware considers:
  - How many users are affected?
  - How easily can it infect and spread?
  - How much money can it generate?

:::

# Zero-Day Exploits

::: incremental

- Malware typically needs elevated privileges to run
- *Goal*: privilege escalation without user interaction
- What is a zero-day exploit?
    - A previously unknown vulnerability
    - No patch or fix available
    - Attackers exploit the vulnerability
    - Supports malware delivery and attack

:::

::: {.fragment style="font-size: 0.95em; margin-top: -0.5em;"}

**Any recent examples of zero-day exploits? Let's explore further!**

:::

# "gaining access to anyones [*sic*] browser without them even visiting a website"

::: fragment

[Read the article by eva (xyzeva on GitHub)!](https://kibty.town/blog/arc/)

:::

# Understanding Worms

::: fragment

- Self-replicating and self-propagating software

- Worms can spread without user interaction

- **Primary goal**: infect as many devices as possible

- Worms can be spread via:
  - Email
  - Network shares
  - USB drives

:::

# Understanding Viruses

::: fragment

- Modifies a program and inserts their own code

- Viruses often require user interaction to spread

- **Primary goal**: cause damage or steal information

- Viruses can be spread via:
  - Email
  - Downloads
  - Web sites

:::

# Understanding Trojans

::: fragment

- Disguises itself as a normal file or program

- Trojan horses often require user interaction to spread

- **Primary goal**: create a backdoor in your system for malicious activities

- Trojan horses can be spread via:
  - Email
  - Downloads
  - Web sites

:::

# Exploring Ransomware

::: fragment

- Access and then encrypts a victim's files

- Demands access to payment to decrypt the files

- **Primary goal**: extort money by denying file access

- Ransomware can be spread via:
  - Phishing emails
  - Malicious downloads
  - Exploiting network security holes

:::

# Understanding Spyware

::: fragment

- Secretly monitors and collects user activity

- Often installed without the user's knowledge

- **Primary goal**: gather information about a person or organization without their knowledge

- Spyware can be spread via:
  - Phishing emails
  - Malicious downloads
  - Bundled with other software

:::

# Insights About Malware

::: incremental

- Easy exploits once you have gained access!
  - Recursive traversal of directories
  - Search for sensitive and/or system files
  - Encrypt files, delete originals, demand ransom
- Which programming language should be used for malware?
- Trade-offs for implementing and deploying malware?

:::

# Installation with `curl` and `bash`! We do this?!?

::: incremental

- Examples of common installation methods:
    - `curl -L https://install.pivpn.io | bash`
    - `/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/install.sh)"`
- What are the security risks of these commands?
- What are the alternatives to these installation methods?

:::

# Malware Source Code

::: {.fragment .fade .boxed-content style="padding-top: .5em; font-size: 0.9em;"}

- {{< iconify fa github >}} GitHub repository: [vxunderground/MalwareSourceCode](https://github.com/vxunderground/MalwareSourceCode)
- {{< iconify fa github >}} GitHub repository: [ytisf/theZoo](https://github.com/ytisf/theZoo)

:::

::: incremental

- **Important reminders**:
    - Only use for educational purposes
    - Do not run directly on your computer
    - Use a Docker container or virtual machine
    - Run without access to the Internet

:::

# Compromise Indicators

::: incremental

- Artifacts that indicate a system has been compromised
- Shared by security researchers to mitigate threats
- Common indicators:
  - Hash of known malicious source or object code
  - IP addresses, URLs, or domains of control server(s)
  - Strings or byte patterns in malicious or infected code
- **How can we (automatically) detect these indicators?**

:::

## Using the `strings` command

::: incremental

- Extracts strings from binary files
- Can be used to find malicious code
- Example: `strings /path/to/malware`
- Running `strings` on `nvim`:

:::

::: fragment

```text
export NVIM_SYSTEM_RPLUGIN_MANIFEST='/nix/store/0mifqx8ab7nm7xf3h6jw55fgs109hlz2-neovim-0.10.1/rplugin.vim'
export GEM_HOME='/nix/store/08bjh6z0xj5cdw86fibbbqabrj8ss6f2-neovim-ruby-env/lib/ruby/gems/3.3.0'
PATH=${PATH:+':'$PATH':'}
if [[ $PATH != *':''/nix/store/08bjh6z0xj5cdw86fibbbqabrj8ss6f2-neovim-ruby-env/bin'':'* ]]; then
    PATH=$PATH'/nix/store/08bjh6z0xj5cdw86fibbbqabrj8ss6f2-neovim-ruby-env/bin'
PATH=${PATH#':'}
PATH=${PATH%':'}
export PATH
LUA_PATH=${LUA_PATH:+';'$LUA_PATH';'}
```

:::

## Obfuscating Malware

::: incremental

- Obscure a malware's source code or binary

- Makes it harder to detect and analyze

- Common obfuscation techniques:
  - Encryption
  - Encoding
  - Compression
  - Polymorphism

:::

::: fragment

{{< iconify fa6-solid people-line >}} **How would you obfuscate a Python, Java,
or C program?**

:::

## Obfuscation Details

::: {.incremental style="margin-top: -0.5em;"}

- What can we obfuscate in a program?

  - Hard-coded strings
  - Names of functions or variables
  - Control flow of the program
  - Data flow of the program
  - Data structures and algorithms

- *Remember*, the program must still work correctly
- Deobfuscation is the process of reversing obfuscation
- Let's explore some obfuscation techniques!

:::
