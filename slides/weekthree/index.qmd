---
title: "Crytpography Overview"
subtitle: "Understanding the Need for and Uses of Cryptography"
description: "What are the best practicies for using cryptographic algorithms?"
date: "2024-08-09"
date-format: long
author: Gregory M. Kapfhammer
execute:
  echo: true
jupyter: python3
format:
  revealjs:
    theme: default
    css: ../css/styles.css
    history: false
    scrollable: true
    transition: slide
    highlight-style: github
    footer: "Security Synapse"
---

## Getting Started in Computer Security

::: {.columns}

::: {.column style="font-size: 0.85em;"}

::: fragment

### *Learn the Lingo*

#### Abbreviations

- AAA
- CIA
- PDR

#### Concepts

- Authentication
- Authorization
- Cryptography

:::

:::

::: {.column style="font-size: 0.85em;"}

::: fragment

### *Think Like Hacker*

#### Implementation

- Look for vulnerabilities
- Try to exploit them
- Identify weakest links

#### Prevention

- Use secure coding practices
- Leverage security tools
- Rethink everything!

:::

:::

:::

# What is cryptography?

::: {.incremental style="margin-top: -0.5em;"}

- Establish secure and confidential communication channels
- Supports creation of digital signatures
- Allows us to support the "AAA principles":
  - Authentication
  - Authorization
  - Accounting
- Ensures that attackers cannot "listen in" to communication
- Ensures *non-repudiation* of digital communication

:::

# *Important Insight*: cryptography is one of the key building blocks of computer security!

# *Key Reminder*: it is deceptively difficult to deploy cryptographic algorithms correctly!

# *Admonition*: avoid the temptation to "roll your own" cryptography algorithms!

# When do you use cryptography?

::: fragment

- Commit data to a GitHub repository
- Access a website using HTTPS
- Use a password manager
- Send a message in chat app

:::

# Cryptography Terminology

::: fragment

- **Plaintext**: the original message
- **Ciphertext**: the encrypted message
- **Cipher**: the algorithm used to encrypt the message
- **Key**: the secret used to encrypt the message
    - **Symmetric Key**: the same key  to encrypt and decrypt
    - **Asymmetric Key**: different keys to encrypt and decrypt

:::

## Trapdoor Functions

::: {.incremental style="margin-top: -0.5em;"}

- **One-way function**: easy to compute, hard to invert
- **Examples**: RSA, Diffie-Hellman, Digital Signatures
- Insights about the RSA algorithm:
    - Easy to multiply two large prime numbers
      - Exponentiation
      - Multiplication
      - Modular arithmetic
    - Hard to factor the product of two large prime numbers
    - Encryption is "easy" and decryption is "hard"
:::
